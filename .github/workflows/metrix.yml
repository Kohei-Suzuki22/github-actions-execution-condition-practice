name: Matrix Demo
on: push
jobs:
  build:
    # jobレベルでcontinue-on-error: trueにすることで、マトリクスの一部のjobが失敗しても他のjobの実行は中断されない。
    # これを入れないと、マトリクスの一部でjobが失敗したら、並列で動いていた他のjobも中断される。
    continue-on-error: true
    strategy:
      # マトリクスを使って、実行したい複数バリエーションを指定できる。
      # 指定するキーと値はすべて自由に指定できる。
      # マトリクスの実行も並列実行となる。
      matrix:
        # 以下の場合は、ubuntu-latestでnode-version12,14,16をそれぞれ実行 + windows-latestでnode-version12,14,16をそれぞれ実行するので
        # 2 ✖︎ 3 の 6jobが実行されることになる。
        node-version: [12, 14, 16]
        operating-system: [ubuntu-latest, windows-latest]
        # includeは、上に定義したmatrix(行列)の組み合わせに加え、新しい構成を追加する。
        ## keyが存在しない場合(=元の組み合わせの一部を上書きせずに追加できる場合)、元のすべてのマトリクスに追加される。
        ## keyとvalueが元の組み合わせに重複している場合、そのkeyとvalueが重複している元の組み合わせのみに、マージされる。
        ## keyが存在していて、valueが存在していない場合、独立した新たな組み合わせとなる。
        ## 公式 -> https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
        include:
          - node-version: 18
            operating-system: ubuntu-latest
        # excludeは、マッチした要素を元のマトリクスから取り除く。
        exclude:
          - node-version: 12
            operating-system: windows-latest

    # matrixを使って動的に指定
    runs-on: ${{ matrix.operating-system }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          # matrixを使って動的に指定
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      - name: Build Project
        run: npm run build
